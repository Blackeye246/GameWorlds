import clientPromise from "@/lib/mongodb";import { getServerSession } from "next-auth/next";import { authOptions } from "./auth/[...nextauth]";import { ObjectId } from "mongodb";export default async function handler(req,res){const client=await clientPromise;const db=client.db("gameworlds");const session=await getServerSession(req,res,authOptions);const userEmail=session?.user?.email||null;const isAdmin=userEmail===process.env.NEXT_PUBLIC_ADMIN_EMAIL;if(req.method==="GET"){if(req.query.mine&&userEmail){const list=await db.collection("orders").find({userEmail}).sort({_id:-1}).toArray();return res.json(list);}if(!isAdmin) return res.status(401).json({message:"Not admin"});const all=await db.collection("orders").find({}).sort({_id:-1}).toArray();return res.json(all);}if(req.method==="POST"){if(!userEmail) return res.status(401).json({message:"Login required"});const {productId,paymentMethod,accountId}=req.body;if(!productId||!paymentMethod||!accountId) return res.status(400).json({message:"Missing"});const product=await db.collection("products").findOne({_id:new ObjectId(productId)});if(!product) return res.status(404).json({message:"Product not found"});const r=await db.collection("orders").insertOne({productId,productTitle:product.title,price:product.price,paymentMethod,accountId,userEmail,status:"pending",createdAt:new Date()});return res.json({_id:r.insertedId});}if(req.method==="PUT"){if(!isAdmin) return res.status(401).json({message:"Not admin"});const {id}=req.query;const {status}=req.body;await db.collection("orders").updateOne({_id:new ObjectId(id)},{ $set: {status}});return res.json({ok:true});}return res.status(405).end();}
